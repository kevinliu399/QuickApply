{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { DropdownContext } from '../useDropdown/DropdownContext';\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\nimport { useButton } from '../useButton/useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nimport { extractEventHandlers } from '../utils';\n\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\r\n */\nexport function useMenuButton(parameters = {}) {\n  const {\n    disabled = false,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  } = parameters;\n  const menuContext = React.useContext(DropdownContext);\n  if (menuContext === null) {\n    throw new Error('useMenuButton: no menu context available.');\n  }\n  const {\n    state,\n    dispatch,\n    registerTrigger,\n    popupId\n  } = menuContext;\n  const {\n    getRootProps: getButtonRootProps,\n    rootRef: buttonRootRef,\n    active\n  } = useButton({\n    disabled,\n    focusableWhenDisabled,\n    rootRef: externalRef\n  });\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\n  const createHandleClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    dispatch({\n      type: DropdownActionTypes.toggle,\n      event\n    });\n  };\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: DropdownActionTypes.open,\n        event\n      });\n    }\n  };\n  const getOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleClick(otherHandlers),\n    onKeyDown: createHandleKeyDown(otherHandlers)\n  });\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedProps = combineHooksSlotProps(getOwnRootProps, getButtonRootProps);\n    return _extends({\n      'aria-haspopup': 'menu',\n      'aria-expanded': state.open,\n      'aria-controls': popupId\n    }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {\n      tabIndex: 0,\n      // this is needed to make the button focused after click in Safari\n      ref: handleRef\n    });\n  };\n  return {\n    active,\n    getRootProps,\n    open: state.open,\n    rootRef: handleRef\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","DropdownContext","DropdownActionTypes","useButton","combineHooksSlotProps","extractEventHandlers","useMenuButton","parameters","disabled","focusableWhenDisabled","rootRef","externalRef","menuContext","useContext","Error","state","dispatch","registerTrigger","popupId","getRootProps","getButtonRootProps","buttonRootRef","active","handleRef","createHandleClick","otherHandlers","event","_otherHandlers$onClic","onClick","call","defaultMuiPrevented","type","toggle","createHandleKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","open","getOwnRootProps","externalProps","externalEventHandlers","getCombinedProps","tabIndex","ref"],"sources":["C:/Users/Corey Zhao/quickapply-frontend/frontend/node_modules/@mui/base/useMenuButton/useMenuButton.js"],"sourcesContent":["'use client';\r\n\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport { DropdownContext } from '../useDropdown/DropdownContext';\r\nimport { DropdownActionTypes } from '../useDropdown/useDropdown.types';\r\nimport { useButton } from '../useButton/useButton';\r\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\r\nimport { extractEventHandlers } from '../utils';\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\r\n */\r\nexport function useMenuButton(parameters = {}) {\r\n  const {\r\n    disabled = false,\r\n    focusableWhenDisabled,\r\n    rootRef: externalRef\r\n  } = parameters;\r\n  const menuContext = React.useContext(DropdownContext);\r\n  if (menuContext === null) {\r\n    throw new Error('useMenuButton: no menu context available.');\r\n  }\r\n  const {\r\n    state,\r\n    dispatch,\r\n    registerTrigger,\r\n    popupId\r\n  } = menuContext;\r\n  const {\r\n    getRootProps: getButtonRootProps,\r\n    rootRef: buttonRootRef,\r\n    active\r\n  } = useButton({\r\n    disabled,\r\n    focusableWhenDisabled,\r\n    rootRef: externalRef\r\n  });\r\n  const handleRef = useForkRef(buttonRootRef, registerTrigger);\r\n  const createHandleClick = otherHandlers => event => {\r\n    var _otherHandlers$onClic;\r\n    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    dispatch({\r\n      type: DropdownActionTypes.toggle,\r\n      event\r\n    });\r\n  };\r\n  const createHandleKeyDown = otherHandlers => event => {\r\n    var _otherHandlers$onKeyD;\r\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\r\n    if (event.defaultMuiPrevented) {\r\n      return;\r\n    }\r\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\r\n      event.preventDefault();\r\n      dispatch({\r\n        type: DropdownActionTypes.open,\r\n        event\r\n      });\r\n    }\r\n  };\r\n  const getOwnRootProps = (otherHandlers = {}) => ({\r\n    onClick: createHandleClick(otherHandlers),\r\n    onKeyDown: createHandleKeyDown(otherHandlers)\r\n  });\r\n  const getRootProps = (externalProps = {}) => {\r\n    const externalEventHandlers = extractEventHandlers(externalProps);\r\n    const getCombinedProps = combineHooksSlotProps(getOwnRootProps, getButtonRootProps);\r\n    return _extends({\r\n      'aria-haspopup': 'menu',\r\n      'aria-expanded': state.open,\r\n      'aria-controls': popupId\r\n    }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {\r\n      tabIndex: 0,\r\n      // this is needed to make the button focused after click in Safari\r\n      ref: handleRef\r\n    });\r\n  };\r\n  return {\r\n    active,\r\n    getRootProps,\r\n    open: state.open,\r\n    rootRef: handleRef\r\n  };\r\n}"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,IAAIC,UAAU,QAAQ,YAAY;AAC9D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,qBAAqB,QAAQ,gCAAgC;AACtE,SAASC,oBAAoB,QAAQ,UAAU;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,UAAU,GAAG,CAAC,CAAC,EAAE;EAC7C,MAAM;IACJC,QAAQ,GAAG,KAAK;IAChBC,qBAAqB;IACrBC,OAAO,EAAEC;EACX,CAAC,GAAGJ,UAAU;EACd,MAAMK,WAAW,GAAGd,KAAK,CAACe,UAAU,CAACZ,eAAe,CAAC;EACrD,IAAIW,WAAW,KAAK,IAAI,EAAE;IACxB,MAAM,IAAIE,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,MAAM;IACJC,KAAK;IACLC,QAAQ;IACRC,eAAe;IACfC;EACF,CAAC,GAAGN,WAAW;EACf,MAAM;IACJO,YAAY,EAAEC,kBAAkB;IAChCV,OAAO,EAAEW,aAAa;IACtBC;EACF,CAAC,GAAGnB,SAAS,CAAC;IACZK,QAAQ;IACRC,qBAAqB;IACrBC,OAAO,EAAEC;EACX,CAAC,CAAC;EACF,MAAMY,SAAS,GAAGvB,UAAU,CAACqB,aAAa,EAAEJ,eAAe,CAAC;EAC5D,MAAMO,iBAAiB,GAAGC,aAAa,IAAIC,KAAK,IAAI;IAClD,IAAIC,qBAAqB;IACzB,CAACA,qBAAqB,GAAGF,aAAa,CAACG,OAAO,KAAK,IAAI,IAAID,qBAAqB,CAACE,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IAC3G,IAAIA,KAAK,CAACI,mBAAmB,EAAE;MAC7B;IACF;IACAd,QAAQ,CAAC;MACPe,IAAI,EAAE7B,mBAAmB,CAAC8B,MAAM;MAChCN;IACF,CAAC,CAAC;EACJ,CAAC;EACD,MAAMO,mBAAmB,GAAGR,aAAa,IAAIC,KAAK,IAAI;IACpD,IAAIQ,qBAAqB;IACzB,CAACA,qBAAqB,GAAGT,aAAa,CAACU,SAAS,KAAK,IAAI,IAAID,qBAAqB,CAACL,IAAI,CAACJ,aAAa,EAAEC,KAAK,CAAC;IAC7G,IAAIA,KAAK,CAACI,mBAAmB,EAAE;MAC7B;IACF;IACA,IAAIJ,KAAK,CAACU,GAAG,KAAK,WAAW,IAAIV,KAAK,CAACU,GAAG,KAAK,SAAS,EAAE;MACxDV,KAAK,CAACW,cAAc,CAAC,CAAC;MACtBrB,QAAQ,CAAC;QACPe,IAAI,EAAE7B,mBAAmB,CAACoC,IAAI;QAC9BZ;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACD,MAAMa,eAAe,GAAGA,CAACd,aAAa,GAAG,CAAC,CAAC,MAAM;IAC/CG,OAAO,EAAEJ,iBAAiB,CAACC,aAAa,CAAC;IACzCU,SAAS,EAAEF,mBAAmB,CAACR,aAAa;EAC9C,CAAC,CAAC;EACF,MAAMN,YAAY,GAAGA,CAACqB,aAAa,GAAG,CAAC,CAAC,KAAK;IAC3C,MAAMC,qBAAqB,GAAGpC,oBAAoB,CAACmC,aAAa,CAAC;IACjE,MAAME,gBAAgB,GAAGtC,qBAAqB,CAACmC,eAAe,EAAEnB,kBAAkB,CAAC;IACnF,OAAOvB,QAAQ,CAAC;MACd,eAAe,EAAE,MAAM;MACvB,eAAe,EAAEkB,KAAK,CAACuB,IAAI;MAC3B,eAAe,EAAEpB;IACnB,CAAC,EAAEsB,aAAa,EAAEC,qBAAqB,EAAEC,gBAAgB,CAACD,qBAAqB,CAAC,EAAE;MAChFE,QAAQ,EAAE,CAAC;MACX;MACAC,GAAG,EAAErB;IACP,CAAC,CAAC;EACJ,CAAC;EACD,OAAO;IACLD,MAAM;IACNH,YAAY;IACZmB,IAAI,EAAEvB,KAAK,CAACuB,IAAI;IAChB5B,OAAO,EAAEa;EACX,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}