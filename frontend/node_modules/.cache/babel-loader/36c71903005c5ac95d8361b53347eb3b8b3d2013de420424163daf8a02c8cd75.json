{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kevin\\\\Documents\\\\GitHub\\\\quickapply-frontend\\\\frontend\\\\src\\\\components\\\\MainGrid\\\\ListingCardGrid.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Fab } from '@mui/material';\nimport ListingCard from './ListingCard';\nimport AddIcon from '@mui/icons-material/Add';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8080/jobs'; // Change at production\n\nconst ListingCardGrid = () => {\n  _s();\n  const [listings, setListings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isAdding, setIsAdding] = useState(false);\n  const handleAddListing = async () => {\n    setIsAdding(true);\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          title: 'New Job',\n          company: 'New Company',\n          isChecked: false,\n          isEditing: false,\n          color: 'yellow'\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('New listing added', data);\n    } catch (error) {\n      console.error('Error adding new listing:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchListings = async () => {\n      try {\n        const response = await fetch(API_URL);\n        const data = await response.json();\n        setListings(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching listings:', error);\n        setLoading(false);\n      }\n    };\n    fetchListings();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      children: listings.map((listing, index) => /*#__PURE__*/_jsxDEV(ListingCard, {\n        title: listing.title,\n        company: listing.company,\n        isChecked: listing.isChecked,\n        isEditing: listing.isEditing,\n        color: listing.status\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fab, {\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      sx: {\n        position: 'fixed',\n        bottom: 40,\n        right: 40,\n        backgroundColor: 'white',\n        border: '4px solid #67FFA4',\n        color: 'black',\n        '&:hover': {\n          backgroundColor: 'white'\n        }\n      },\n      children: isAdding ? /*#__PURE__*/_jsxDEV(CheckIcon, {\n        sx: {\n          color: 'black'\n        },\n        onClick: handleAddListing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(AddIcon, {\n        sx: {\n          color: 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(ListingCardGrid, \"TM1ZmnS5darQypOklU5iz7dpHMk=\");\n_c = ListingCardGrid;\nexport default ListingCardGrid;\nvar _c;\n$RefreshReg$(_c, \"ListingCardGrid\");","map":{"version":3,"names":["React","useState","useEffect","Box","Fab","ListingCard","AddIcon","CheckIcon","jsxDEV","_jsxDEV","API_URL","ListingCardGrid","_s","listings","setListings","loading","setLoading","isAdding","setIsAdding","handleAddListing","response","fetch","method","headers","body","JSON","stringify","title","company","isChecked","isEditing","color","ok","Error","data","json","console","log","error","fetchListings","children","fileName","_jsxFileName","lineNumber","columnNumber","map","listing","index","status","sx","position","bottom","right","backgroundColor","border","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Documents/GitHub/quickapply-frontend/frontend/src/components/MainGrid/ListingCardGrid.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Box, Fab } from '@mui/material';\r\nimport ListingCard from './ListingCard';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\n\r\nconst API_URL = 'http://localhost:8080/jobs'; // Change at production\r\n\r\ninterface Listing {\r\n  title: string;\r\n  company: string;\r\n  isChecked: boolean;\r\n  isEditing: boolean;\r\n  status: 'red' | 'green' | 'yellow';\r\n}\r\n\r\nconst ListingCardGrid: React.FC = () => {\r\n  const [listings, setListings] = useState<Listing[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  const handleAddListing = async () => {\r\n    setIsAdding(true);\r\n\r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          title: 'New Job',\r\n          company: 'New Company',\r\n          isChecked: false,\r\n          isEditing: false,\r\n          color: 'yellow',\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log('New listing added', data);\r\n    } catch (error) {\r\n      console.error('Error adding new listing:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchListings = async () => {\r\n      try {\r\n        const response = await fetch(API_URL);\r\n        const data = await response.json();\r\n        setListings(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching listings:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchListings();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Box>\r\n        {listings.map((listing, index) => (\r\n          <ListingCard\r\n            key={index}\r\n            title={listing.title}\r\n            company={listing.company}\r\n            isChecked={listing.isChecked}\r\n            isEditing={listing.isEditing}\r\n            color={listing.status}\r\n          />\r\n        ))}\r\n      </Box>\r\n      <Fab\r\n        color=\"primary\"\r\n        aria-label=\"add\"\r\n        sx={{\r\n          position: 'fixed',\r\n          bottom: 40,\r\n          right: 40,\r\n          backgroundColor: 'white',\r\n          border: '4px solid #67FFA4',\r\n          color: 'black',\r\n          '&:hover': {\r\n            backgroundColor: 'white',\r\n          },\r\n        }}\r\n      >\r\n\r\n        {\r\n          isAdding ? (\r\n            <CheckIcon sx={{ color: 'black' }}\r\n              onClick={handleAddListing}\r\n            />\r\n          ) : (\r\n            <AddIcon sx={{ color: 'black' }} />\r\n          )\r\n        }\r\n      </Fab>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default ListingCardGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}